{"version":3,"sources":["components/FlippableSquare/index.tsx","pages/IndexPage/index.tsx","components/Game/index.tsx","pages/GamePage/index.tsx","App.tsx","index.tsx"],"names":["FlippableSquare","state","id","isFlipped","handleClick","props","hasBeenMatched","shouldBeFlippable","setState","prevState","DOMElement","document","getElementById","String","classList","contains","remove","add","renderblock","this","isGameCard","cardIcon","className","classnames","icon","backText","classes","frontClassName","frontText","onClick","cardClassName","Component","defaultProps","undefined","checkFlippedCards","IndexPage","to","Game","flippableSquares","flippedSquares","progressBarValue","flippableSquare","find","flipCard","push","setTimeout","handleFlippedCards","length","checkFlippableSquares","firstFlippedCard","secondFlippedCard","forEach","element","flippableSquareFound","flippableSquaresJSON","setInterval","updateProgressBar","map","Alert","variant","Heading","ProgressBar","now","NewGamePage","library","faCoffee","faAirFreshener","faBaby","faAmbulance","faCoins","faCarrot","faCreditCard","faCookie","App","basename","process","exact","path","component","React","ReactDOM","render"],"mappings":"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","file":"static/js/main.5ffa8120.chunk.js","sourcesContent":["/* eslint-disable @typescript-eslint/ban-types */\n// React\nimport React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n// eslint-disable-next-line no-unused-vars\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\n\nimport classnames from 'classnames';\n\ninterface FlippableSquareState {\n  id: number | null;\n  isFlipped: boolean;\n}\ninterface FlippableSquareProps {\n  id: number | null;\n  cardClassName: string | null;\n  frontText: string | null;\n  backText: string | any | null;\n  shouldBeFlippable: boolean;\n  frontClassName: string | null;\n  isGameCard: boolean;\n  cardIcon: IconName | undefined;\n  checkFlippedCards: Function | undefined;\n  handleClick: Function | undefined;\n  isFlipped: boolean;\n  hasBeenMatched: boolean;\n}\n\nclass FlippableSquare extends Component<FlippableSquareProps, FlippableSquareState> {\n  state: FlippableSquareState = {\n    id: null,\n    isFlipped: false,\n  };\n\n  static defaultProps: FlippableSquareProps = {\n    id: null,\n    cardClassName: null,\n    frontText: null,\n    backText: null,\n    shouldBeFlippable: true,\n    frontClassName: null,\n    isGameCard: false,\n    cardIcon: undefined,\n    checkFlippedCards: undefined,\n    handleClick: undefined,\n    isFlipped: false,\n    hasBeenMatched: false,\n  };\n\n  handleClick = (): void => {\n    if (this.props.hasBeenMatched) return;\n\n    if (this.props.handleClick) {\n      this.props.handleClick(this.props.id, this.props.shouldBeFlippable);\n    } else {\n      // Kinda want to do this another way but could not figure out how in an elegant way :(\n      if (!this.props.shouldBeFlippable) return;\n\n      // Set the flipped state.\n      this.setState((prevState: FlippableSquareState) => {\n        prevState.isFlipped = !prevState.isFlipped;\n        return {\n          ...prevState,\n        };\n      });\n\n      const DOMElement = document.getElementById(String(this.props.id));\n\n      if (DOMElement) {\n        if (DOMElement.classList.contains('flipped')) {\n          DOMElement.classList.remove('flipped');\n        } else {\n          DOMElement.classList.add('flipped');\n        }\n      }\n    }\n  };\n\n  render(): JSX.Element {\n    let renderblock;\n    if (!this.props.isGameCard) {\n      if (this.state.isFlipped) {\n        renderblock = <div className=\"card-text back card-active\">{this.props.backText}</div>;\n      } else {\n        const classes = classnames('card-text front', this.props.frontClassName);\n        renderblock = <div className={classes}>{this.props.frontText}</div>;\n      }\n    } else {\n      if (this.props.isFlipped) {\n        if (this.props.cardIcon) {\n          renderblock = (\n            <div className=\"card-div\">\n              <FontAwesomeIcon className={classnames('card-icon')} icon={this.props.cardIcon} />\n            </div>\n          );\n        }\n      }\n    }\n\n    return (\n      <div id={String(this.props.id)} onClick={this.handleClick} className={classnames(this.props.cardClassName)}>\n        {renderblock}\n      </div>\n    );\n  }\n}\n\nexport default FlippableSquare;\n","// React\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\n// CSS\nimport './index.css';\n\n// Components\nimport FlippableSquare from '../../components/FlippableSquare';\n\nconst IndexPage = (): JSX.Element => {\n  return (\n    <div className=\"card-container\">\n      <p className=\"info\">Click the P to get started!</p>\n      <FlippableSquare\n        key={1}\n        id={1}\n        cardClassName=\"card left\"\n        shouldBeFlippable\n        isFlipped={false}\n        frontText=\"F\"\n        backText=\"A Memory Card Game\"\n      />\n      <FlippableSquare\n        key={2}\n        id={2}\n        cardClassName=\"card left\"\n        frontClassName=\"card-active\"\n        shouldBeFlippable={false}\n        isFlipped={false}\n        frontText=\"L\"\n        backText=\"This is a Memory Card Game\"\n      />\n      <FlippableSquare\n        key={3}\n        id={3}\n        cardClassName=\"card\"\n        shouldBeFlippable\n        isFlipped={false}\n        frontText=\"I\"\n        backText={\n          <div className=\"instructions\">\n            <h2>Instructions</h2>\n            <p>\n              This is a timed card memory game. Click the green cards to see what symbol they uncover and try to find\n              the matching symbol underneath the other cards.\n            </p>\n          </div>\n        }\n      />\n      <FlippableSquare\n        key={4}\n        id={4}\n        cardClassName=\"card\"\n        shouldBeFlippable\n        isFlipped={false}\n        frontText=\"P\"\n        backText={\n          <div className=\"playgame\">\n            <Link className=\"play\" to=\"/new-game\">\n              Play\n            </Link>\n          </div>\n        }\n      />\n    </div>\n  );\n};\n\nexport default IndexPage;\n","import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Alert from 'react-bootstrap/Alert';\n\nimport { IconName } from '@fortawesome/free-solid-svg-icons';\n\nimport FlippableSquare from '../FlippableSquare';\n\nimport flippableSquaresJSON from '../../assets/easy-game.json';\n\ninterface GameState {\n  flippableSquares: FlippableSquare[];\n  flippedSquares: FlippableSquare[];\n  progressBarValue: number;\n}\n\nclass Game extends Component<{}, GameState> {\n  state: GameState = {\n    flippableSquares: [],\n    flippedSquares: [],\n    progressBarValue: 0,\n  };\n\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      //@ts-ignore\n      flippableSquares: flippableSquaresJSON,\n      flippedSquares: [],\n      progressBarValue: 0,\n    };\n  }\n\n  // If the component is mounted update the progressbart\n  componentDidMount() {\n    setInterval(() => this.updateProgressBar(), 1000);\n  }\n\n  handleClick = (id: number, shouldBeFlippable: boolean) => {\n    // If it shouldn't be able to be flipped return.\n    if (!shouldBeFlippable) return;\n\n    this.setState((prevState: GameState) => {\n      const { flippableSquares, flippedSquares } = prevState;\n\n      // Find the specific card that matches the ID provided\n      const flippableSquare: any = flippableSquares.find((flippableSquare: any) => flippableSquare.id === id);\n      if (!flippableSquare) return;\n\n      // Set the flipped property opposite as it is now.\n      flippableSquare.isFlipped = !flippableSquare.isFlipped;\n      this.flipCard(flippableSquare.id, flippableSquare);\n      // If it is flipped push it to the flipped squares array.\n      if (flippableSquare.isFlipped) {\n        flippedSquares.push(flippableSquare.id);\n      }\n\n      return {\n        ...prevState,\n        flippableSquares,\n        flippedSquares,\n      };\n    });\n\n    // Call the handleFlippedCards method in order to check if cards are matched.\n    // In a timeout because the checks are happening too fast.\n    setTimeout(() => {\n      this.handleFlippedCards();\n    }, 1337);\n  };\n\n  handleFlippedCards = () => {\n    this.setState((prevState: GameState) => {\n      const { flippableSquares, flippedSquares } = prevState;\n\n      // If the flippedsquares length is bigger than 2, reset all squares.\n      if (flippedSquares.length > 2) {\n        this.checkFlippableSquares(prevState);\n      } else {\n        // Find the two elements in the FlippedSquares array.\n        const firstFlippedCard: any = flippableSquares.find(\n          (flippableSquare: any) => flippableSquare.id === flippedSquares[0],\n        );\n        const secondFlippedCard: any = flippableSquares.find(\n          (flippableSquare: any) => flippableSquare.id === flippedSquares[1],\n        );\n\n        // If there is no first or second flipped card return.\n        if (!firstFlippedCard || !secondFlippedCard) return;\n        if (firstFlippedCard.cardIcon === secondFlippedCard.cardIcon) {\n          firstFlippedCard.hasBeenMatched = true;\n          secondFlippedCard.hasBeenMatched = true;\n        } else {\n          this.checkFlippableSquares(prevState);\n        }\n      }\n      // Resetting the FlippedSquare array in order to not get any conflicts.\n      flippedSquares.length = 0;\n\n      return {\n        ...prevState,\n        flippableSquares,\n        flippedSquares,\n      };\n    });\n  };\n\n  // Function to check the flippable squares and to flip them\n  checkFlippableSquares = (prevState: GameState) => {\n    const { flippableSquares, flippedSquares } = prevState;\n    flippedSquares.forEach((element: any) => {\n      const flippableSquareFound: any = flippableSquares.find((flippableSquare: any) => flippableSquare.id === element);\n\n      flippableSquareFound.isFlipped = !flippableSquareFound.isFlipped;\n      this.flipCard(flippableSquareFound.id, flippableSquareFound);\n    });\n  };\n\n  // The flipping of the card happens here by manipulating the specific Dom Element.\n  flipCard = (id: number, flippableSquare: any) => {\n    // If the card somehow has been matched do nothing.\n    if (flippableSquare.hasBeenMatched) return;\n\n    const DOMElement = document.getElementById(String(id));\n\n    if (DOMElement) {\n      if (DOMElement.classList.contains('flipped')) {\n        DOMElement.classList.remove('flipped');\n      } else {\n        DOMElement.classList.add('flipped');\n      }\n    }\n  };\n\n  // Updating the progressbar with 5% each time.\n  updateProgressBar() {\n    this.setState((prevState: GameState) => {\n      let { progressBarValue } = prevState;\n\n      if (progressBarValue >= 100) {\n        const DOMElement = document.getElementById('game-over');\n        if (DOMElement) {\n          DOMElement.classList.remove('game-over-display');\n        }\n        prevState.flippableSquares = [];\n      } else {\n        progressBarValue = prevState.progressBarValue + 5;\n      }\n\n      return {\n        progressBarValue,\n      };\n    });\n  }\n\n  render() {\n    if (!this.state.flippableSquares) {\n      return;\n    }\n\n    // Foreach json object map it to a FlippableSquare and put it into the state.\n    const flippableSquares = this.state.flippableSquares.map((flippableSquare: any) => (\n      <FlippableSquare\n        key={flippableSquare.id}\n        id={flippableSquare.id}\n        cardClassName=\"card-new-game\"\n        cardIcon={flippableSquare.cardIcon as IconName}\n        shouldBeFlippable\n        isGameCard\n        isFlipped={flippableSquare.isFlipped}\n        handleClick={this.handleClick}\n        hasBeenMatched={flippableSquare.hasBeenMatched}\n      />\n    ));\n\n    return (\n      <div className=\"card-container-new-game\">\n        <Alert id=\"game-over\" className=\"game-over game-over-display\" variant=\"danger\">\n          <Alert.Heading>Game Over</Alert.Heading>\n          <p className=\"mb-0\">\n            <br />\n            You did not complete the game within the given time period. Please try again, by refreshing. :)\n          </p>\n        </Alert>\n        <ProgressBar className=\"progressbar\" variant=\"warning\" now={this.state.progressBarValue} />\n        {flippableSquares}\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from 'react';\nimport './newgame.css';\n\nimport Game from '../../components/Game';\n\nconst NewGamePage = (): JSX.Element => {\n  return <Game />;\n};\n\nexport default NewGamePage;\n","// React\nimport React from 'react';\nimport { Switch, HashRouter, Route } from 'react-router-dom';\n\n// Pages\nimport IndexPage from './pages/IndexPage';\nimport NewGamePage from './pages/GamePage';\n\n// Font Awesome\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCoffee,\n  faAirFreshener,\n  faBaby,\n  faAmbulance,\n  faCoins,\n  faCarrot,\n  faCreditCard,\n  faCookie,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCoffee);\nlibrary.add(faAirFreshener);\nlibrary.add(faBaby);\nlibrary.add(faAmbulance);\nlibrary.add(faCoins);\nlibrary.add(faCarrot);\nlibrary.add(faCreditCard);\nlibrary.add(faCookie);\n\n/* eslint-disable */\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <HashRouter basename={process.env.PUBLIC_URL}>\n          <Switch>\n            <Route exact path={'/'} component={IndexPage} />\n            <Route exact path={'/new-game'} component={NewGamePage} />\n          </Switch>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}